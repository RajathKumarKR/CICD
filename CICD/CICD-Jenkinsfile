node {
 try{
 def server = Artifactory.server 'Artifactory'
 def rtMaven = Artifactory.newMavenBuild()
 def buildInfo
 def dockerImagesTagVersion = 'NaV'  //This will ensure that docker images tag should have 1-1 relation ship with project version
 projectToBuild = 'CICD'
 def gitUrl = 'https://github.com/RajathKumarKR/CICD.git'
 def gitCredentials = 'RajathKumarKR'
 
 stage('------- Checkout --------') {
  // Checkout only pre-registration Module
   checkout([$class: 'GitSCM',
    branches: [
     [name: 'master']
    ],
    userRemoteConfigs: [
     [url: gitUrl, credentialsId:gitCredentials ]
    ]
   ])
 }

 stage('--------- Artifactory configuration ----------------') {
  rtMaven.tool = 'M2_HOME' // Tool name from Jenkins configuration
  rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
 // rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
  buildInfo = Artifactory.newBuildInfo()
  buildInfo.env.capture = true
 }

stage ('---------- build ---------------') {
         
	// for building java projects
        rtMaven.run pom: projectToBuild + '/pom.xml', goals: 'clean install', buildInfo: buildInfo
 }

 stage('---------- SonarQube Analysis --------------') {
  def mvnHome = tool name: 'M2_HOME', type: 'maven'
  withSonarQubeEnv('SonarQube') {
   sh "${mvnHome}/bin/mvn -f '$branch/$projectToBuild/' sonar:sonar"
  }
 }
 
 stage('----------- Publish build info -------------') {
  /*
  Publishing build info to Artifcatory (JFrog)
  */
  server.publishBuildInfo buildInfo
 }
    
	}
 // Catching the exception for triggering email
  catch (exception) {
        print exception
		// If the job was aborted by any user
        if (exception instanceof InterruptedException) {
           currentBuild.result = "ABORTED"
        }
		// If the job failed due to some error
        else{
            currentBuild.result = "FAILURE"
        }
        
        throw exception //rethrow exception to prevent the build from proceeding
        }
  finally{
		if(currentBuild.result == "FAILURE"){
		// sending email to kernel recipients
	}
	}
}

